// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RobotTelemetry.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.2.0).
 */

#ifndef FAST_DDS_GENERATED__ROBOTTELEMETRY_HPP
#define FAST_DDS_GENERATED__ROBOTTELEMETRY_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ROBOTTELEMETRY_SOURCE)
#define ROBOTTELEMETRY_DllAPI __declspec( dllexport )
#else
#define ROBOTTELEMETRY_DllAPI __declspec( dllimport )
#endif // ROBOTTELEMETRY_SOURCE
#else
#define ROBOTTELEMETRY_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ROBOTTELEMETRY_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure RobotTelemetry defined by the user in the IDL file.
 * @ingroup RobotTelemetry
 */
class RobotTelemetry
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RobotTelemetry()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RobotTelemetry()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RobotTelemetry that will be copied.
     */
    eProsima_user_DllExport RobotTelemetry(
            const RobotTelemetry& x)
    {
                    m_id = x.m_id;

                    m_x = x.m_x;

                    m_y = x.m_y;

                    m_orientation = x.m_orientation;

                    m_battery_level = x.m_battery_level;

                    m_speed = x.m_speed;

                    m_status = x.m_status;

                    m_timestamp = x.m_timestamp;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RobotTelemetry that will be copied.
     */
    eProsima_user_DllExport RobotTelemetry(
            RobotTelemetry&& x) noexcept
    {
        m_id = std::move(x.m_id);
        m_x = x.m_x;
        m_y = x.m_y;
        m_orientation = x.m_orientation;
        m_battery_level = x.m_battery_level;
        m_speed = x.m_speed;
        m_status = std::move(x.m_status);
        m_timestamp = x.m_timestamp;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RobotTelemetry that will be copied.
     */
    eProsima_user_DllExport RobotTelemetry& operator =(
            const RobotTelemetry& x)
    {

                    m_id = x.m_id;

                    m_x = x.m_x;

                    m_y = x.m_y;

                    m_orientation = x.m_orientation;

                    m_battery_level = x.m_battery_level;

                    m_speed = x.m_speed;

                    m_status = x.m_status;

                    m_timestamp = x.m_timestamp;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RobotTelemetry that will be copied.
     */
    eProsima_user_DllExport RobotTelemetry& operator =(
            RobotTelemetry&& x) noexcept
    {

        m_id = std::move(x.m_id);
        m_x = x.m_x;
        m_y = x.m_y;
        m_orientation = x.m_orientation;
        m_battery_level = x.m_battery_level;
        m_speed = x.m_speed;
        m_status = std::move(x.m_status);
        m_timestamp = x.m_timestamp;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x RobotTelemetry object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const RobotTelemetry& x) const
    {
        return (m_id == x.m_id &&
           m_x == x.m_x &&
           m_y == x.m_y &&
           m_orientation == x.m_orientation &&
           m_battery_level == x.m_battery_level &&
           m_speed == x.m_speed &&
           m_status == x.m_status &&
           m_timestamp == x.m_timestamp);
    }

    /*!
     * @brief Comparison operator.
     * @param x RobotTelemetry object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const RobotTelemetry& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member id
     * @param _id New value to be copied in member id
     */
    eProsima_user_DllExport void id(
            const std::string& _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function moves the value in member id
     * @param _id New value to be moved in member id
     */
    eProsima_user_DllExport void id(
            std::string&& _id)
    {
        m_id = std::move(_id);
    }

    /*!
     * @brief This function returns a constant reference to member id
     * @return Constant reference to member id
     */
    eProsima_user_DllExport const std::string& id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport std::string& id()
    {
        return m_id;
    }


    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            double _x)
    {
        m_x = _x;
    }

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport double x() const
    {
        return m_x;
    }

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport double& x()
    {
        return m_x;
    }


    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            double _y)
    {
        m_y = _y;
    }

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport double y() const
    {
        return m_y;
    }

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport double& y()
    {
        return m_y;
    }


    /*!
     * @brief This function sets a value in member orientation
     * @param _orientation New value for member orientation
     */
    eProsima_user_DllExport void orientation(
            double _orientation)
    {
        m_orientation = _orientation;
    }

    /*!
     * @brief This function returns the value of member orientation
     * @return Value of member orientation
     */
    eProsima_user_DllExport double orientation() const
    {
        return m_orientation;
    }

    /*!
     * @brief This function returns a reference to member orientation
     * @return Reference to member orientation
     */
    eProsima_user_DllExport double& orientation()
    {
        return m_orientation;
    }


    /*!
     * @brief This function sets a value in member battery_level
     * @param _battery_level New value for member battery_level
     */
    eProsima_user_DllExport void battery_level(
            float _battery_level)
    {
        m_battery_level = _battery_level;
    }

    /*!
     * @brief This function returns the value of member battery_level
     * @return Value of member battery_level
     */
    eProsima_user_DllExport float battery_level() const
    {
        return m_battery_level;
    }

    /*!
     * @brief This function returns a reference to member battery_level
     * @return Reference to member battery_level
     */
    eProsima_user_DllExport float& battery_level()
    {
        return m_battery_level;
    }


    /*!
     * @brief This function sets a value in member speed
     * @param _speed New value for member speed
     */
    eProsima_user_DllExport void speed(
            double _speed)
    {
        m_speed = _speed;
    }

    /*!
     * @brief This function returns the value of member speed
     * @return Value of member speed
     */
    eProsima_user_DllExport double speed() const
    {
        return m_speed;
    }

    /*!
     * @brief This function returns a reference to member speed
     * @return Reference to member speed
     */
    eProsima_user_DllExport double& speed()
    {
        return m_speed;
    }


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status()
    {
        return m_status;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }



private:

    std::string m_id;
    double m_x{0.0};
    double m_y{0.0};
    double m_orientation{0.0};
    float m_battery_level{0.0};
    double m_speed{0.0};
    std::string m_status;
    uint64_t m_timestamp{0};

};

#endif // _FAST_DDS_GENERATED_ROBOTTELEMETRY_HPP_


