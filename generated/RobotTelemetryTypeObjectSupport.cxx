// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RobotTelemetryTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.2.0).
 */

#include "RobotTelemetryTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include "RobotTelemetry.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_RobotTelemetry_type_identifier(
        TypeIdentifierPair& type_ids_RobotTelemetry)
{

    ReturnCode_t return_code_RobotTelemetry {eprosima::fastdds::dds::RETCODE_OK};
    return_code_RobotTelemetry =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotTelemetry", type_ids_RobotTelemetry);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_RobotTelemetry)
    {
        StructTypeFlag struct_flags_RobotTelemetry = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_RobotTelemetry = "RobotTelemetry";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_RobotTelemetry;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_RobotTelemetry;
        CompleteTypeDetail detail_RobotTelemetry = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_RobotTelemetry, ann_custom_RobotTelemetry, type_name_RobotTelemetry.to_string());
        CompleteStructHeader header_RobotTelemetry;
        header_RobotTelemetry = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_RobotTelemetry);
        CompleteStructMemberSeq member_seq_RobotTelemetry;
        {
            TypeIdentifierPair type_ids_id;
            ReturnCode_t return_code_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_id)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_id))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_id = 0x00000000;
            bool common_id_ec {false};
            CommonStructMember common_id {TypeObjectUtils::build_common_struct_member(member_id_id, member_flags_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_id, common_id_ec))};
            if (!common_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_id = "id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_id;
            ann_custom_RobotTelemetry.reset();
            CompleteMemberDetail detail_id = TypeObjectUtils::build_complete_member_detail(name_id, member_ann_builtin_id, ann_custom_RobotTelemetry);
            CompleteStructMember member_id = TypeObjectUtils::build_complete_struct_member(common_id, detail_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_RobotTelemetry, member_id);
        }
        {
            TypeIdentifierPair type_ids_x;
            ReturnCode_t return_code_x {eprosima::fastdds::dds::RETCODE_OK};
            return_code_x =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_x);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_x)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "x Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_x = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_x = 0x00000001;
            bool common_x_ec {false};
            CommonStructMember common_x {TypeObjectUtils::build_common_struct_member(member_id_x, member_flags_x, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_x, common_x_ec))};
            if (!common_x_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure x member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_x = "x";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_x;
            ann_custom_RobotTelemetry.reset();
            CompleteMemberDetail detail_x = TypeObjectUtils::build_complete_member_detail(name_x, member_ann_builtin_x, ann_custom_RobotTelemetry);
            CompleteStructMember member_x = TypeObjectUtils::build_complete_struct_member(common_x, detail_x);
            TypeObjectUtils::add_complete_struct_member(member_seq_RobotTelemetry, member_x);
        }
        {
            TypeIdentifierPair type_ids_y;
            ReturnCode_t return_code_y {eprosima::fastdds::dds::RETCODE_OK};
            return_code_y =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_y);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_y)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "y Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_y = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_y = 0x00000002;
            bool common_y_ec {false};
            CommonStructMember common_y {TypeObjectUtils::build_common_struct_member(member_id_y, member_flags_y, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_y, common_y_ec))};
            if (!common_y_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure y member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_y = "y";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_y;
            ann_custom_RobotTelemetry.reset();
            CompleteMemberDetail detail_y = TypeObjectUtils::build_complete_member_detail(name_y, member_ann_builtin_y, ann_custom_RobotTelemetry);
            CompleteStructMember member_y = TypeObjectUtils::build_complete_struct_member(common_y, detail_y);
            TypeObjectUtils::add_complete_struct_member(member_seq_RobotTelemetry, member_y);
        }
        {
            TypeIdentifierPair type_ids_orientation;
            ReturnCode_t return_code_orientation {eprosima::fastdds::dds::RETCODE_OK};
            return_code_orientation =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_orientation);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_orientation)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "orientation Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_orientation = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_orientation = 0x00000003;
            bool common_orientation_ec {false};
            CommonStructMember common_orientation {TypeObjectUtils::build_common_struct_member(member_id_orientation, member_flags_orientation, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_orientation, common_orientation_ec))};
            if (!common_orientation_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure orientation member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_orientation = "orientation";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_orientation;
            ann_custom_RobotTelemetry.reset();
            CompleteMemberDetail detail_orientation = TypeObjectUtils::build_complete_member_detail(name_orientation, member_ann_builtin_orientation, ann_custom_RobotTelemetry);
            CompleteStructMember member_orientation = TypeObjectUtils::build_complete_struct_member(common_orientation, detail_orientation);
            TypeObjectUtils::add_complete_struct_member(member_seq_RobotTelemetry, member_orientation);
        }
        {
            TypeIdentifierPair type_ids_battery_level;
            ReturnCode_t return_code_battery_level {eprosima::fastdds::dds::RETCODE_OK};
            return_code_battery_level =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_battery_level);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_battery_level)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "battery_level Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_battery_level = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_battery_level = 0x00000004;
            bool common_battery_level_ec {false};
            CommonStructMember common_battery_level {TypeObjectUtils::build_common_struct_member(member_id_battery_level, member_flags_battery_level, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_battery_level, common_battery_level_ec))};
            if (!common_battery_level_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure battery_level member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_battery_level = "battery_level";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_battery_level;
            ann_custom_RobotTelemetry.reset();
            CompleteMemberDetail detail_battery_level = TypeObjectUtils::build_complete_member_detail(name_battery_level, member_ann_builtin_battery_level, ann_custom_RobotTelemetry);
            CompleteStructMember member_battery_level = TypeObjectUtils::build_complete_struct_member(common_battery_level, detail_battery_level);
            TypeObjectUtils::add_complete_struct_member(member_seq_RobotTelemetry, member_battery_level);
        }
        {
            TypeIdentifierPair type_ids_speed;
            ReturnCode_t return_code_speed {eprosima::fastdds::dds::RETCODE_OK};
            return_code_speed =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_speed);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_speed)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "speed Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_speed = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_speed = 0x00000005;
            bool common_speed_ec {false};
            CommonStructMember common_speed {TypeObjectUtils::build_common_struct_member(member_id_speed, member_flags_speed, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_speed, common_speed_ec))};
            if (!common_speed_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure speed member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_speed = "speed";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_speed;
            ann_custom_RobotTelemetry.reset();
            CompleteMemberDetail detail_speed = TypeObjectUtils::build_complete_member_detail(name_speed, member_ann_builtin_speed, ann_custom_RobotTelemetry);
            CompleteStructMember member_speed = TypeObjectUtils::build_complete_struct_member(common_speed, detail_speed);
            TypeObjectUtils::add_complete_struct_member(member_seq_RobotTelemetry, member_speed);
        }
        {
            TypeIdentifierPair type_ids_status;
            ReturnCode_t return_code_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_status)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_status))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_status = 0x00000006;
            bool common_status_ec {false};
            CommonStructMember common_status {TypeObjectUtils::build_common_struct_member(member_id_status, member_flags_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_status, common_status_ec))};
            if (!common_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_status = "status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_status;
            ann_custom_RobotTelemetry.reset();
            CompleteMemberDetail detail_status = TypeObjectUtils::build_complete_member_detail(name_status, member_ann_builtin_status, ann_custom_RobotTelemetry);
            CompleteStructMember member_status = TypeObjectUtils::build_complete_struct_member(common_status, detail_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_RobotTelemetry, member_status);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000007;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_RobotTelemetry.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_RobotTelemetry);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_RobotTelemetry, member_timestamp);
        }
        CompleteStructType struct_type_RobotTelemetry = TypeObjectUtils::build_complete_struct_type(struct_flags_RobotTelemetry, header_RobotTelemetry, member_seq_RobotTelemetry);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_RobotTelemetry, type_name_RobotTelemetry.to_string(), type_ids_RobotTelemetry))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotTelemetry already registered in TypeObjectRegistry for a different type.");
        }
    }
}
